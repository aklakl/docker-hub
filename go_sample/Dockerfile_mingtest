# Instruction refer:https://docs.docker.com/language/golang/build-images/
# Ubuntu-golang :https://github.com/jheise/ubuntu-golang

# Images from: https://hub.docker.com/_/golang
## Build the application from source
#FROM golang:1.21 AS build-stage
#FROM golang:1.21
# We must hardcode with BUILDPLATFORM=linux/amd64 
FROM --platform=linux/amd64 docker.io/golang:1.20 AS builder

 


ARG BOOST_VERSION
ARG BOOST_SHA256
ARG OPENSSL_VERSION
ARG OPENSSL_SHA256
ARG SWIG_VERSION
ARG SWIG_SHA256
ARG LIBTORRENT_VERSION
ARG OATPP_VERSION
ARG OATPP_SWAGGER_VERSION
ARG MIMALLOC_VERSION

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM" > /log

# Set destination for COPY
WORKDIR /app

# Copy the source code. Note the slash at the end, as explained in
# https://docs.docker.com/engine/reference/builder/#copy
COPY . .
#RUN yarn install --production
#RUN apt-get update && apt-get install -y


ENV GOPROXY=direct
ENV LD_LIBRARY_PATH=./lib
#RUN export GOPROXY=https://proxy.golang.org
# RUN export GOPROXY=direct
# RUN export LD_LIBRARY_PATH=./lib

RUN pwd > pwd.log
RUN env > env.log

# Build
# RUN cd scripts && bash build_MacOS.sh > build.log
# RUN cd build/package && bash runsurvey.sh > running.log
# /app/

# Optional:
# To bind to a TCP port, runtime parameters must be supplied to the docker command.
# But we can document in the Dockerfile what ports
# the application is going to listen on by default.
# https://docs.docker.com/engine/reference/builder/#expose
EXPOSE 8080

# Run
SHELL ["/bin/bash", "-c"]
#SHELL ["/bin/bash", "/app/build/package/runsurvey.sh"]

#ENTRYPOINT ["/bin/bash"]